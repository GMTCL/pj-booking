'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { useApi, apiRequest } from '@/hooks/useApi';
import './payment-settings.css';

export default function PaymentSettingsPage() {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [bankAccounts, setBankAccounts] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [formData, setFormData] = useState({
    accountName: '',
    bankName: '',
    accountNumber: ''
  });
  const [businessId, setBusinessId] = useState<string | null>(null);

  // Get business ID from URL or session
  useEffect(() => {
    if (session?.user?.id) {
      // For now, we'll use a default business ID
      // In a real app, you'd get this from the URL or user selection
      setBusinessId('default-business-id');
    }
  }, [session]);

  // Load bank accounts
  const { data: bankAccountsData, loading, error } = useApi(
    businessId ? `/api/bank-accounts?businessId=${businessId}` : null
  );

  useEffect(() => {
    if (bankAccountsData) {
      setBankAccounts(bankAccountsData);
    }
  }, [bankAccountsData]);

  const handleAddBankAccount = () => {
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setFormData({
      accountName: '',
      bankName: '',
      accountNumber: ''
    });
  };

  const handleSaveAccount = async () => {
    try {
      console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:', formData);
      
      const response = await apiRequest('/api/bank-accounts', {
        method: 'POST',
        body: JSON.stringify({
          ...formData,
          businessId: businessId
        })
      });

      // Refresh bank accounts list
      const updatedAccounts = await apiRequest(`/api/bank-accounts?businessId=${businessId}`);
      setBankAccounts(updatedAccounts);
      
      handleCloseModal();
      
      // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Transfer Information
      setTimeout(() => {
        window.location.href = '/backoffice/transfer-info';
      }, 1000);
    } catch (error) {
      console.error('Error saving bank account:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ');
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleEditAccount = async (id: string) => {
    try {
      console.log('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:', id);
      // Find the account to edit
      const account = bankAccounts.find((acc: any) => acc.id === id);
      if (account) {
        setFormData({
          accountName: account.accountName,
          bankName: account.bankName,
          accountNumber: account.accountNumber
        });
        setIsModalOpen(true);
      }
    } catch (error) {
      console.error('Error editing account:', error);
    }
  };

  const handleDeleteAccount = async (id: string) => {
    try {
      if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ?')) {
        await apiRequest(`/api/bank-accounts/${id}`, {
          method: 'DELETE'
        });
        
        // Refresh bank accounts list
        const updatedAccounts = await apiRequest(`/api/bank-accounts?businessId=${businessId}`);
        setBankAccounts(updatedAccounts);
      }
    } catch (error) {
      console.error('Error deleting account:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ');
    }
  };

  return (
    <div className="payment-settings-container">
      {/* Header */}
      <div className="header">
        <div className="header-content">
          <div className="logo">
            <span className="logo-text">PrettyQueue</span>
          </div>
          <div className="user-profile">
            <div className="profile-icon">üë§</div>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="nav-container">
        <button className="nav-arrow left">‚Äπ</button>
        <div className="nav-items">
          <Link href="/backoffice/main-dashboard" className="nav-item">‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Link>
          <Link href="/backoffice/payment-settings" className="nav-item active">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</Link>
          <Link href="/backoffice/services" className="nav-item">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</Link>
          <Link href="/backoffice/technicians" className="nav-item">‡∏ä‡πà‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</Link>
          <Link href="/backoffice/customers" className="nav-item">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Link>
          <Link href="/backoffice/queue-management" className="nav-item">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß</Link>
        </div>
        <button className="nav-arrow right">‚Ä∫</button>
      </div>

      {/* Main Content */}
      <div className="main-content">
        <div className="content-container">
          {/* Page Header */}
          <div className="page-header">
            <h1 className="page-title">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
            <button className="add-bank-button" onClick={handleAddBankAccount}>
              + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
            </button>
          </div>

          {/* Divider */}
          <div className="divider"></div>

          {/* Bank Accounts Table */}
          <div className="bank-accounts-section">
            <div className="table-header">
              <div className="header-cell">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</div>
              <div className="header-cell">‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</div>
              <div className="header-cell">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</div>
            </div>
            
            <div className="table-divider"></div>
            
            {bankAccounts.length === 0 ? (
              <div className="empty-state">
                <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</p>
              </div>
            ) : (
              <div className="table-body">
                {bankAccounts.map((account) => (
                  <div key={account.id} className="table-row">
                    <div className="table-cell">{account.accountName}</div>
                    <div className="table-cell">{account.bankName}</div>
                    <div className="table-cell">{account.accountNumber}</div>
                    <div className="table-cell actions">
                      <button 
                        className="edit-btn"
                        onClick={() => handleEditAccount(account.id)}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button 
                        className="delete-btn"
                        onClick={() => handleDeleteAccount(account.id)}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Footer */}
      <div className="footer">
        <div className="footer-content">
          <span className="copyright">Copyright ¬© PrettyQueue</span>
        </div>
      </div>

      {/* Modal */}
      {isModalOpen && (
        <div className="modal-overlay" onClick={handleCloseModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2 className="modal-title">‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h2>
            </div>
            
            <div className="modal-body">
              <div className="form-group">
                <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</label>
                <input
                  type="text"
                  className="form-input"
                  value={formData.accountName}
                  onChange={(e) => handleInputChange('accountName', e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
                />
              </div>
              
              <div className="form-group">
                <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</label>
                <select
                  className="form-select"
                  value={formData.bankName}
                  onChange={(e) => handleInputChange('bankName', e.target.value)}
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</option>
                  <option value="‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢">‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢</option>
                  <option value="‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå">‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå</option>
                  <option value="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û">‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û</option>
                  <option value="‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢">‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢</option>
                  <option value="‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï">‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï</option>
                  <option value="‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤">‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤</option>
                  <option value="‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô">‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏¥‡∏™‡∏•‡∏≤‡∏°‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏¥‡∏™‡∏•‡∏≤‡∏°‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏¥‡∏™‡πÇ‡∏Å‡πâ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏¥‡∏™‡πÇ‡∏Å‡πâ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏¥‡∏ï‡∏µ‡πâ‡πÅ‡∏ö‡∏á‡∏Å‡πå">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏¥‡∏ï‡∏µ‡πâ‡πÅ‡∏ö‡∏á‡∏Å‡πå</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡πÅ‡∏ï‡∏ô‡∏î‡∏≤‡∏£‡πå‡∏î‡∏ä‡∏≤‡∏£‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡πÅ‡∏ï‡∏ô‡∏î‡∏≤‡∏£‡πå‡∏î‡∏ä‡∏≤‡∏£‡πå‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏π‡∏°‡∏¥‡πÇ‡∏ï‡πÇ‡∏° ‡∏°‡∏¥‡∏ï‡∏ã‡∏∏‡∏¢ ‡∏ó‡∏£‡∏±‡∏™‡∏ï‡πå">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏π‡∏°‡∏¥‡πÇ‡∏ï‡πÇ‡∏° ‡∏°‡∏¥‡∏ï‡∏ã‡∏∏‡∏¢ ‡∏ó‡∏£‡∏±‡∏™‡∏ï‡πå</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏°‡∏¥‡∏ã‡∏π‡πÇ‡∏Æ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏°‡∏¥‡∏ã‡∏π‡πÇ‡∏Æ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ö‡∏µ‡πÄ‡∏≠‡πá‡∏ô‡∏û‡∏µ ‡∏õ‡∏≤‡∏£‡∏µ‡∏ö‡∏≤‡∏™">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ö‡∏µ‡πÄ‡∏≠‡πá‡∏ô‡∏û‡∏µ ‡∏õ‡∏≤‡∏£‡∏µ‡∏ö‡∏≤‡∏™</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏î‡∏≠utsche Bank">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏î‡∏≠utsche Bank</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Æ‡πà‡∏≠‡∏á‡∏Å‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏Æ‡πâ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Æ‡πà‡∏≠‡∏á‡∏Å‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏Æ‡πâ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏≠‡∏ã‡∏µ‡∏ö‡∏µ‡∏ã‡∏µ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏≠‡∏ã‡∏µ‡∏ö‡∏µ‡∏ã‡∏µ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏°‡∏¢‡πå‡πÅ‡∏ö‡∏á‡∏Å‡πå">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏°‡∏¢‡πå‡πÅ‡∏ö‡∏á‡∏Å‡πå</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ã‡∏µ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ã‡∏µ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡πÄ‡∏°‡∏≠‡∏£‡πå‡πÅ‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏•‡πå">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡πÄ‡∏°‡∏≠‡∏£‡πå‡πÅ‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏•‡πå</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ï‡∏£‡∏±‡∏Ñ‡∏ä‡∏±‡πà‡∏ô">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ï‡∏£‡∏±‡∏Ñ‡∏ä‡∏±‡πà‡∏ô</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡πÄ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ö‡∏£‡∏≤Ïù¥Ìä∏">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡πÄ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ö‡∏£‡∏≤Ïù¥Ìä∏</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡πÑ‡∏≠‡∏ã‡∏µ‡∏ö‡∏µ‡∏ã‡∏µ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡πÑ‡∏≠‡∏ã‡∏µ‡∏ö‡∏µ‡∏ã‡∏µ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏ã‡∏¥‡∏ï‡∏µ‡πâ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏ã‡∏¥‡∏ï‡∏µ‡πâ</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏î‡∏±‡∏™‡πÄ‡∏ó‡∏£‡∏µ‡∏¢‡∏•">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏î‡∏±‡∏™‡πÄ‡∏ó‡∏£‡∏µ‡∏¢‡∏•</option>
                  <option value="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏ö‡∏µ‡πÇ‡∏≠‡∏ã‡∏µ">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ä‡∏ô‡πà‡∏≤‡∏ö‡∏µ‡πÇ‡∏≠‡∏ã‡∏µ</option>
                </select>
              </div>
              
              <div className="form-group">
                <label className="form-label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</label>
                <input
                  type="text"
                  className="form-input"
                  value={formData.accountNumber}
                  onChange={(e) => handleInputChange('accountNumber', e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
                />
              </div>
            </div>
            
            <div className="modal-footer">
              <button className="cancel-button" onClick={handleCloseModal}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button className="save-button" onClick={handleSaveAccount}>
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}